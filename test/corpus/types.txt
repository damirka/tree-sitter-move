====
types
====

let a: u8;
let a: &address;
let a: &mut address;
let a: (A);
let a: (A, &mut A);
let a: A;
let a: A<B>;
let a: A<B<C>>;
let a: M::A<C, D<E>, E<F<G>>>;
let a: 0x0::M::A;

---

(source_file
  (let_statement
    binds: (bind_list
      (bind_var
        (variable_identifier)))
    type: (apply_type
      (module_access
        (identifier))))
  (let_statement
    binds: (bind_list
      (bind_var
        (variable_identifier)))
    type: (ref_type
      (apply_type
        (module_access
          (identifier)))))
  (let_statement
    binds: (bind_list
      (bind_var
        (variable_identifier)))
    type: (ref_type
      (apply_type
        (module_access
          (identifier)))))
  (let_statement
    binds: (bind_list
      (bind_var
        (variable_identifier)))
    type: (tuple_type
      (apply_type
        (module_access
          (identifier)))))
  (let_statement
    binds: (bind_list
      (bind_var
        (variable_identifier)))
    type: (tuple_type
      (apply_type
        (module_access
          (identifier)))
      (ref_type
        (apply_type
          (module_access
            (identifier))))))
  (let_statement
    binds: (bind_list
      (bind_var
        (variable_identifier)))
    type: (apply_type
      (module_access
        (identifier))))
  (let_statement
    binds: (bind_list
      (bind_var
        (variable_identifier)))
    type: (apply_type
      (module_access
        (identifier))
      type_arguments: (type_arguments
        (apply_type
          (module_access
            (identifier))))))
  (let_statement
    binds: (bind_list
      (bind_var
        (variable_identifier)))
    type: (apply_type
      (module_access
        (identifier))
      type_arguments: (type_arguments
        (apply_type
          (module_access
            (identifier))
          type_arguments: (type_arguments
            (apply_type
              (module_access
                (identifier))))))))
  (let_statement
    binds: (bind_list
      (bind_var
        (variable_identifier)))
    type: (apply_type
      (module_access
        module: (module_identifier)
        (identifier))
      type_arguments: (type_arguments
        (apply_type
          (module_access
            (identifier)))
        (apply_type
          (module_access
            (identifier))
          type_arguments: (type_arguments
            (apply_type
              (module_access
                (identifier)))))
        (apply_type
          (module_access
            (identifier))
          type_arguments: (type_arguments
            (apply_type
              (module_access
                (identifier))
              type_arguments: (type_arguments
                (apply_type
                  (module_access
                    (identifier))))))))))
  (let_statement
    binds: (bind_list
      (bind_var
        (variable_identifier)))
    type: (apply_type
      (module_access
        address: (address_literal)
        module: (module_identifier)
        (identifier)))))
