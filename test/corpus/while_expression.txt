====
while_expression
====

while (i < len) swap(v, i, { i = i + 1; i });

while (i < len) {
  swap(v, i);
};

while (i < len)
  while (i==len)
    swap(v, i);

while (i < len)
  while (i==len) {
    swap(v, i);
  };
----

(source_file
  (while_expression
    eb: (binary_expression
      lhs: (name_expression
        (module_access
          (identifier)))
      operator: (binary_operator)
      rhs: (name_expression
        (module_access
          (identifier))))
    body: (call_expression
      (name_expression
        (module_access
          (identifier)))
      args: (arg_list
        (name_expression
          (module_access
            (identifier)))
        (name_expression
          (module_access
            (identifier)))
        (block
          (assign_expression
            lhs: (name_expression
              (module_access
                (identifier)))
            rhs: (binary_expression
              lhs: (name_expression
                (module_access
                  (identifier)))
              operator: (binary_operator)
              rhs: (num_literal)))
          (name_expression
            (module_access
              (identifier)))))))
  (while_expression
    eb: (binary_expression
      lhs: (name_expression
        (module_access
          (identifier)))
      operator: (binary_operator)
      rhs: (name_expression
        (module_access
          (identifier))))
    body: (block
      (call_expression
        (name_expression
          (module_access
            (identifier)))
        args: (arg_list
          (name_expression
            (module_access
              (identifier)))
          (name_expression
            (module_access
              (identifier)))))))
  (while_expression
    eb: (binary_expression
      lhs: (name_expression
        (module_access
          (identifier)))
      operator: (binary_operator)
      rhs: (name_expression
        (module_access
          (identifier))))
    body: (while_expression
      eb: (binary_expression
        lhs: (name_expression
          (module_access
            (identifier)))
        operator: (binary_operator)
        rhs: (name_expression
          (module_access
            (identifier))))
      body: (call_expression
        (name_expression
          (module_access
            (identifier)))
        args: (arg_list
          (name_expression
            (module_access
              (identifier)))
          (name_expression
            (module_access
              (identifier)))))))
  (while_expression
    eb: (binary_expression
      lhs: (name_expression
        (module_access
          (identifier)))
      operator: (binary_operator)
      rhs: (name_expression
        (module_access
          (identifier))))
    body: (while_expression
      eb: (binary_expression
        lhs: (name_expression
          (module_access
            (identifier)))
        operator: (binary_operator)
        rhs: (name_expression
          (module_access
            (identifier))))
      body: (block
        (call_expression
          (name_expression
            (module_access
              (identifier)))
          args: (arg_list
            (name_expression
              (module_access
                (identifier)))
            (name_expression
              (module_access
                (identifier)))))))))
