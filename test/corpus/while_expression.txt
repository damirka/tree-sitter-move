====
while_expression with expression
====

while (i < len) swap(v, i, { i = i + 1; i });
----
(source_file
  (while_expression
    (while_keyword)
    eb: (binary_expression
      lhs: (variable_identifier)
      operator: (binary_operator)
      rhs: (variable_identifier))
    body: (call_expression
      function: (function_identifier)
      args: (arg_list
        (variable_identifier)
        (variable_identifier)
        (block
          (assign_expression
            lhs: (variable_identifier)
            rhs: (binary_expression
              lhs: (variable_identifier)
              operator: (binary_operator)
              rhs: (num_literal)))
          (variable_identifier))))))

====
while_expression with block
====

while (i < len) {
  swap(v, i);
};
----
(source_file
  (while_expression
    (while_keyword)
    eb: (binary_expression
      lhs: (variable_identifier)
      operator: (binary_operator)
      rhs: (variable_identifier))
    body: (block
      (call_expression
        function: (function_identifier)
        args: (arg_list
          (variable_identifier)
          (variable_identifier))))))

====
while_expression with nest_while
====

while (i < len)
  while (i==len)
    swap(v, i);

----
(source_file
  (while_expression
    (while_keyword)
    eb: (binary_expression
      lhs: (variable_identifier)
      operator: (binary_operator)
      rhs: (variable_identifier))
    body: (while_expression
      (while_keyword)
      eb: (binary_expression
        lhs: (variable_identifier)
        operator: (binary_operator)
        rhs: (variable_identifier))
      body: (call_expression
        function: (function_identifier)
        args: (arg_list
          (variable_identifier)
          (variable_identifier))))))


====
while_expression with nest_while_block
====

while (i < len)
  while (i==len) {
    swap(v, i);
  };

----

(source_file
  (while_expression
    (while_keyword)
    eb: (binary_expression
      lhs: (variable_identifier)
      operator: (binary_operator)
      rhs: (variable_identifier))
    body: (while_expression
      (while_keyword)
      eb: (binary_expression
        lhs: (variable_identifier)
        operator: (binary_operator)
        rhs: (variable_identifier))
      body: (block
        (call_expression
          function: (function_identifier)
          args: (arg_list
            (variable_identifier)
            (variable_identifier)))))))